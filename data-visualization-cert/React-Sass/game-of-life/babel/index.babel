const Button = ReactBootstrap.Button;
const ButtonGroup = ReactBootstrap.ButtonGroup;
const DropdownButton = ReactBootstrap.DropdownButton;
const MenuItem = ReactBootstrap.MenuItem;
const MAX_COLOR = 9;

const PRESETS = [
  { name: "Glider", shape: 
      [ [-1,-1], [0,-1], [1,-1], [-1,0], [0,1] ]
  },
  { name: "Lightweight Spaceship", shape: 
      [ [-1,-1], [2,-1], [-2,0], [-2,1], [2,1], [-2,2], [-1,2], [0,2], [1,2] ]
  }, 
  { name: "F-Pentomino", shape: 
      [ [0,-1], [1,-1], [-1,0], [0,0], [0, 1] ]
  },
  { name: "C/10 Orthogonal Spaceship", shape:
      [ [-3,-6], [-2,-6], [1,-6], [2,-6], [-1,-5], [0,-5], [-1,-4], [0,-4], [-4,-3], [-2,-3], 
        [1,-3], [3,-3], [-4,-2], [3,-2], [-4,0], [3,0], [-3,1], [-2,1], [1,1], [2,1], [-2,2], 
        [-1,2], [0,2], [1,2], [-1,4], [0,4], [-1,5], [0,5] ]
  },
  { name: "Copperhead", shape:
      [ [-1,-6], [0,-6], [-2,-5], [-1,-5], [0,-5], [1,-5], [-3,-3], [-2,-3], [-1,-3], [0,-3],
        [1,-3], [2,-3], [-2,-2], [-1,-2], [0,-2], [1,-2], [-3,0], [-2,0], [1,0], [2,0], [-5,1],
        [-4,1], [-2,1], [1,1], [3,1], [4,1], [-2,2], [1,2], [-1,5], [0,5], [-1,6], [0,6] ]
  },
  { name: "Queen Bee's Shuttle", shape: 
      [ [-2,-3], [-4,-2], [-2,-2], [-5,-1], [-3,-1], [-11,0], [-10,0], [-6,0], [-3,0], [9,0], 
        [10,0], [-11,1], [-10,1], [-5,1], [-3,1], [9,1], [10,1], [-4,2], [-2,2], [-2,3] ]
  },
  { name: "Schick's Engine", shape:
      [ [-9,-5], [-6,-5], [-10,-4], [-10,-3], [-6,-3], [-10,-2], [-9,-2], [-8,-2], [-7,-2], 
        [3,-2], [4,-2], [-4,-1], [-3,-1], [-2,-1], [4,-1], [5,-1], [-4,0], [-3,0], [-1,0], [0,0],
        [7,0], [8,0], [9,0], [-4,1], [-3,1], [-2,1], [4,1], [5,1], [-10,2], [-9,2], [-8,2], [-7,2],
        [3,2], [4,2], [-10,3], [-6,3], [-10,4], [-9,5], [-6,5] ]
  },
  { name: "Free Code Camp", shape:
      [ [-19,-20], [-18,-20], [-17,-20], [-16,-20], [-12,-20], [-11,-20], [-6,-20], [-5,-20], 
        [-4,-20], [-3,-20], [0,-20], [1,-20], [2,-20], [3,-20], [-19,-19], [-13,-19], [-10,-19], 
        [-6,-19], [0,-19], [-19,-18], [-13,-18], [-10,-18], [-6,-18], [0,-18], [-19,-17], [-18,-17], 
        [-17,-17], [-13,-17], [-12,-17], [-11,-17], [-6,-17], [-5,-17], [-4,-17], [0,-17], [1,-17], 
        [2,-17], [-19,-16], [-13,-16], [-11,-16], [-6,-16], [0,-16], [-19,-15], [-13,-15], [-10,-15], 
        [-6,-15], [0,-15], [-19,-14], [-13,-14], [-9,-14], [-6,-14], [-5,-14], [-4,-14], [-3,-14], 
        [0,-14], [1,-14], [2,-14], [3,-14], [-11,-11], [-10,-11], [-9,-11], [-5,-11], [-4,-11], [-3,-11], 
        [1,-11], [2,-11], [7,-11], [8,-11], [9,-11], [10,-11], [-12,-10], [-6,-10], [-2,-10], [1,-10], 
        [3,-10], [7,-10], [-13,-9], [-6,-9], [-2,-9], [1,-9], [4,-9], [7,-9], [-13,-8], [-6,-8], [-2,-8], 
        [1,-8], [4,-8], [7,-8], [8,-8], [9,-8], [-13,-7], [-6,-7], [-2,-7], [1,-7], [4,-7], [7,-7], 
        [-12,-6], [-6,-6], [-2,-6], [1,-6], [3,-6], [7,-6], [-11,-5], [-10,-5], [-9,-5], [-5,-5], [-4,-5], 
        [-3,-5], [1,-5], [2,-5], [7,-5], [8,-5], [9,-5], [10,-5], [-4,-2], [-3,-2], [-2,-2], [3,-2], [8,-2], 
        [14,-2], [17,-2], [18,-2], [19,-2], [-5,-1], [2,-1], [4,-1], [8,-1], [9,-1], [13,-1], [14,-1], [17,-1], 
        [20,-1], [-6,0], [1,0], [5,0], [8,0], [10,0], [12,0], [14,0], [17,0], [20,0], [-6,1], [1,1], [5,1], 
        [8,1], [11,1], [14,1], [17,1], [18,1], [19,1], [-6,2], [1,2], [2,2], [3,2], [4,2], [5,2], [8,2], [14,2], 
        [17,2], [-5,3], [1,3], [5,3], [8,3], [14,3], [17,3], [-4,4], [-3,4], [-2,4], [1,4], [5,4], [8,4], [14,4], 
        [17,4] ]
  }
];


//****************************************************************/

class Cell extends React.Component {
  render() {
    return (
      <span draggable="true" className={"cell " + this.props.color + "-" + this.props.cellLife} onClick={this.onCellClick.bind(this, this.props.id)} onDragEnter={this.onCellDrag.bind(this, this.props.id)}></span>
    )
  }
  
  onCellClick(id) {
    this.props.passCellClick(id);
  }
  
  onCellDrag(id, e) {
    this.props.passCellClick(id);
  }
}

//****************************************************************/
class Board extends React.Component {
  
  passCellClick(id) {
    this.props.handleCellClick(id);
  }
  
  render() {
    var boardArr = [];
    for (let i = 0; i < this.props.size.numCols; i++) {
      for (let j = 0; j < this.props.size.numRows; j++) {
        let id = j + i*this.props.size.numRows;
        boardArr.push(<Cell id={id} cellLife={this.props.life[id]} color={this.props.color} passCellClick={this.passCellClick.bind(this)}/>);
      }
    }
    return (
      <div className="center board-grid">
        {boardArr}
      </div>
    )
  }
}
//****************************************************************/
class Counter extends React.Component {
  render() {
    return (
        <div className="counter">Turn: <span className="counter-digits">{this.props.turn}</span></div>
    );
  }
}    

//****************************************************************/
class Controls extends React.Component {
  constructor(props) {
    super(props);
    
    let presetsMenuList = [];
    
    for (let i = 0; i < PRESETS.length; i++) {
      presetsMenuList.push(<MenuItem eventKey={i} onClick={this.onPresetSelect.bind(this, i)}>{PRESETS[i].name}</MenuItem>)
    }
    this.state = { presetsMenuList: presetsMenuList }
  }
  
  render() {
    return (
      <div className="center">
        <Button id="start" bsStyle={(this.props.isRunning)?"danger":"success"} onClick={this.onStartClick.bind(this)}>{(this.props.isRunning)?"Stop":"Start"}</Button>
        &nbsp;&nbsp;&nbsp;
        <ButtonGroup>
          <Button id="speed-slow" bsStyle="success" active={this.props.speed==1000} onClick={this.onSpeedClick.bind(this, "slow")}>Slow</Button>
          <Button id="speed-medium" bsStyle="success" active={this.props.speed==500} onClick={this.onSpeedClick.bind(this, "medium")}>Medium</Button>
          <Button id="speed-fast" bsStyle="success" active={this.props.speed==100} onClick={this.onSpeedClick.bind(this, "fast")}>Fast</Button>
        </ButtonGroup>
        &nbsp;&nbsp;&nbsp;
        <Button id="speed-slow" bsStyle="warning" onClick={this.onClearClick.bind(this)}>Clear</Button>
        &nbsp;
        <Button id="speed-medium" bsStyle="warning" onClick={this.onRandomClick.bind(this)}>{(this.props.isRunning)?"Shotgun":"Random"}</Button>
        &nbsp;
        <DropdownButton bsStyle="warning" title="Presets" dropup id="presets-button">
          {this.state.presetsMenuList}
        </DropdownButton>
        &nbsp;&nbsp;&nbsp;
        <ButtonGroup>
          <Button id="color-rainbow" bsStyle="info" active={this.props.color=="rainbow"} onClick={this.onColorClick.bind(this, "rainbow")}>Rainbow</Button>
          <Button id="color-red" bsStyle="info" active={this.props.color=="red"} onClick={this.onColorClick.bind(this, "red")}>Red</Button>
          <Button id="color-gray" bsStyle="info" active={this.props.color=="gray"} onClick={this.onColorClick.bind(this, "gray")}>Grayscale</Button>
        </ButtonGroup>
        <br/><br/>
      </div>
    )
  }
                             
  onPresetSelect(id,event) {
    this.props.handlePreset(id);
  }
  onStartClick(event) {
    this.props.handleStart();
  }
  onSpeedClick(speed,event) {
    this.props.handleSpeed(speed);
  }
  onColorClick(color,event) {
    this.props.handleColor(color);
  }
  onClearClick(event) {
    this.props.handleClear();
  }
  onRandomClick(event) {
    this.props.handleRandom();
  }
}
//****************************************************************/
class Game extends React.Component {
  constructor() {
    super();
    var numCols = 120
    var numRows = 80;
    this.state = {
      size: {
          numCols: numCols, 
          numRows: numRows
        },
      numCells: numCols*numRows,
      life: [],
      isRunning: false,
      timer: 0,
      speed: 100,
      turn: 0,
      color: "rainbow"
    }
    for (let i = 0; i < numCols*numRows; i++) {
      this.state.life[i]=0;   
      if (i==1345||i==1346||i==1347)
        this.state.life[i]=1;
    }
  } 
  
  componentDidMount() {
    this.handleRandom();
    this.handleStart();
  }


  handleCellClick(id) {
    let newLife = this.state.life;
    newLife[id] = (this.state.life[id])?0:1;
    this.setState({
      life: newLife
    });
  }
  
  handleRandom() { 
    const PROB = .127;
    let newLife = new Array(this.state.numCells);
    for (let i = 0; i < newLife.length; i++) {
      newLife[i] = (Math.random()<PROB)?1:0;
    }
    this.setState({ life: newLife });
  }
  
  handleClear() {
    if (this.state.isRunning)
      this.setState({ timer: clearInterval(this.state.timer), isRunning : false });
    this.setState({ turn: 0, life: Array(this.state.numCells).fill(0) });
  }
  
  handleColor(color) {
    this.setState({ color: color });
  }

  handleSpeed(speedStr) {
    let speedVal;
    switch(speedStr) {
      case 'slow':
        speedVal = 1000;
        break;
      case 'medium':
        speedVal = 500;
        break;
      case 'fast':
        speedVal = 100;
        break;
    }
    this.setState({ speed: speedVal }, function() {
      if (this.state.isRunning) {
        this.setState({ timer: clearInterval(this.state.timer) });
        this.setState({ timer: setInterval(this.iterate.bind(this), this.state.speed) });
      }
    });
  }
  
  handleStart() {
    if (this.state.isRunning)
      this.setState({ timer: clearInterval(this.state.timer), isRunning : false });
    else {
      this.getCoordList();
      this.setState({ timer: setInterval(this.iterate.bind(this), this.state.speed), isRunning : true });
    }
  }
    
  iterate() {
    let growthGrid = [];
    let numNb;
    
    for (let i = 0; i < this.state.numCells; i++) {
      let x = i % this.state.size.numCols;
      var y = Math.floor(i/this.state.size.numCols);
      let nbArr = [
        this.getId(x, y-1),
        this.getId(x+1, y-1),
        this.getId(x+1, y),
        this.getId(x+1, y+1),
        this.getId(x, y+1),
        this.getId(x-1, y+1),
        this.getId(x-1, y),
        this.getId(x-1, y-1)
      ];
      numNb = nbArr.reduce((n, cellId) => {
          return n + (this.state.life[cellId]>0);
        },0);
      var lifeSet;
      if (this.state.life[i]==0) // rules for dead square
        lifeSet=(numNb==3)?1:0; 
      else // rules for live square
        if (numNb==2||numNb==3) 
          lifeSet=(this.state.life[i]==MAX_COLOR)?MAX_COLOR:this.state.life[i]+1;
        else
          lifeSet=0;
      growthGrid.push(lifeSet);
    }
    
    this.setState({ life : growthGrid, turn: this.state.turn+1});
  }
  
  handlePreset(id) {
    this.handleClear();  
    let midX = Math.floor(this.state.size.numCols/2);
    let midY = Math.floor(this.state.size.numRows/2); 
    let newLife = Array(this.state.numCells).fill(0);

    for (let i = 0; i < PRESETS[id].shape.length; i++) {
      newLife[this.getId(midX+PRESETS[id].shape[i][0],midY+PRESETS[id].shape[i][1])] = 1;
    }

    this.setState({ life: newLife });
  }
  
  getId(x, y) {
    if (x>=this.state.size.numCols)
      x-=this.state.size.numCols;
    else if (x<0) 
      x+=this.state.size.numCols;
    if (y>=this.state.size.numCols)
      y-=this.state.size.numRows;
    else if (y<0) 
      y+=this.state.size.numRows;
    return (y*this.state.size.numCols+x)%this.state.numCells;
  }
  
  // Just to help me get coords for presets
  getCoordList() {
    let coordStr = "";
    let midX = Math.floor(this.state.size.numCols/2);
    let midY = Math.floor(this.state.size.numRows/2); 
    
    for (let i = 0; i < this.state.numCells; i++) {
      if (this.state.life[i]) {
        let x = (i % this.state.size.numCols) - midX;
        var y = Math.floor(i/this.state.size.numCols) - midY;
        coordStr += "[" + x + "," + y +"], ";
      }
    }
    console.log(coordStr);
  }
  
  render() {
    return (
      <div className="center">
        <Board {...this.state} handleCellClick={this.handleCellClick.bind(this)}/>
        <Counter turn={this.state.turn} />
        <br/>
        <Controls isRunning={this.state.isRunning} color={this.state.color} speed={this.state.speed}
          handleStart={this.handleStart.bind(this)} handleSpeed={this.handleSpeed.bind(this)} handleColor={this.handleColor.bind(this)} 
          handleClear={this.handleClear.bind(this)} handleRandom={this.handleRandom.bind(this)} handlePreset={this.handlePreset.bind(this)}/>
      </div>
    )
  }
}

//****************************************************************/
class Header extends React.Component {
  render() {
    return (
      <h1 className="center">Kevin's Game of Life</h1>
    )
  }
}
//****************************************************************/
class Footer extends React.Component {
  render() {
    return (
      <div className="center container">
        <h4 className="center">Made for <a href="https://www.freecodecamp.com">Free Code Camp</a>'s Data Visualizatin Course</h4>
        <h6 className="center"><a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">More Information on Conway's Game of Life</a></h6>
      </div>
    )
  }
}

//****************************************************************/

class App extends React.Component {
  render() {
    return (
      <div className="container center">
        <Header />
        <Game />
        <Footer />
      </div>
    );
  } // render
} // class App

ReactDOM.render(<App />, document.getElementById("app"));
